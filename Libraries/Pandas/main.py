# -*- coding: utf-8 -*-
"""Panda_Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qFHbXWDO8VyFjhL16LWV87KVTQFhy2PY

# Setup
"""

import numpy as np
import pandas as pd

"""#Creation
##Panda Series
"""

import numpy as np
import pandas as pd

s1= pd.Series(np.arange(5))
s1

type(np.arange(5))

"""# Creating series with index"""

s2=pd.Series(np.arange(5),index = ['a','b','c','d','e'])
s2

"""# Assign index to existing Series"""

s2.index=['A','B','C','D','E']
s2

s2.index

"""# Create One-Item Series From Scaler"""

s3=pd.Series(5)
s3

"""# Create Series from list"""

s5 =pd.Series(['A','B','C','D'])
s5

s5.index

"""# Create Series from dict"""

data = {
    'Name':'A',
    'Class':'B',
    'Section':'C'
}

s6 =pd.Series(data)
# s6.index =[1,2,3]
s6

ar =np.array([1,2,3,np.nan,5,6,np.nan,9,10])
ar

ar.mean()

s7=pd.Series(ar)
print(s7,"\nMean: ",s7.mean())

s7.mean(skipna=False)

"""# The index and values Properties"""

print(s6.index)
print(s6.values)
print(type(s6.values))

"""# Access

##loc[] and iloc[]
"""

print(s6)
print(s6.loc['Class'])
print(s6.iloc[1])
print(s6.loc[:])
print(s6.iloc[:])
print(s6.loc[['Name','Section']])

"""#Manipulation
##Alignment
"""

grades1=pd.Series([17,44,28,8,3],index=['a','b','c','d','f'])
grades2=pd.Series([76, 122, 151, 21, 0],index=['d','c','b','a','f'])

total=grades1+grades2
total

grades1=pd.Series([17,44,28,8,3],index=['a','b','c','d','f'])
grades2=pd.Series([76, 122, 151, 21],index=['d','c','b','a'])

total=grades1+grades2
total

total=grades1.add(grades2,fill_value=10)
total

"""#Comparing Series"""

s=np.random.randint(1,7,(100,))
s2=np.random.randint(1,7,(100,))
dices1=pd.Series(s)
dices2=pd.Series(s2)
print(type(dices1==dices2))
dices1==dices2

"""#Element-wise Operations"""

np.random.seed(1)
exam_grades = pd.Series(np.random.randint(60,101,100))
exam_grades

curved_grades = exam_grades.multiply(1.05)
curved_grades

def convert_to_letter(grade):
    if grade >= 90:
        return 'A'
    elif grade >= 80:
        return 'B'
    elif grade >= 70:
        return 'C'
    elif grade >= 65:
        return 'D'
    else:
        return 'F'

letter_grades = curved_grades.apply(convert_to_letter)
letter_grades

part_letter_grade = curved_grades.iloc[:50].apply(convert_to_letter)
part_letter_grade
